using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
#pragma warning disable 660,661

namespace AutoGenerated
{
	public partial class Vehicles
	{
		public virtual IList<Car> Cars { get; set; }

		public Vehicles(XElement element)
		{
			Cars = element.Elements().Where(e => e.Name == "car").Select(e => new Car(e)).ToList();
		}

		public Vehicles()
		{ }

		public static bool operator ==(Vehicles left, Vehicles right)
		{
			return Utils.ValidatedEquals<NullVehicles>(left, right);
		}

		public static bool operator !=(Vehicles left, Vehicles right)
		{
			return !(left == right);
		}
	}

	internal class NullVehicles : Vehicles
	{
		public override IList<Car> Cars { get { throw this.NullAccess("Cars"); } }
	}

	public partial class Color
	{
		public virtual string Hue { get; set; }
		public virtual int? Rgb { get; set; }
		public virtual ColorDescription Description { get; set; }

		public Color(XElement element)
		{
			Hue = element.Elements().Where(e => e.Name == "hue").Select(e => e.Value).SingleOrDefault();
			Rgb = element.Elements().Where(e => e.Name == "rgb").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			Description = element.Elements().Where(e => e.Name == "description").Select(e => new ColorDescription(e)).SingleOrDefault() ?? new NullColorDescription();
		}

		public Color()
		{ }

		public static bool operator ==(Color left, Color right)
		{
			return Utils.ValidatedEquals<NullColor>(left, right);
		}

		public static bool operator !=(Color left, Color right)
		{
			return !(left == right);
		}
	}

	internal class NullColor : Color
	{
		public override string Hue { get { throw this.NullAccess("Hue"); } }
		public override int? Rgb { get { throw this.NullAccess("Rgb"); } }
		public override ColorDescription Description { get { throw this.NullAccess("Description"); } }
	}

	public partial class Car
	{
		public virtual string Brand { get; set; }
		public virtual DateTime? ProductionDate { get; set; }
		public virtual DateTime? ExactProductionDate { get; set; }
		public virtual ManufacturerName Manufacturer { get; set; }
		public virtual decimal? ModelVersion { get; set; }
		public virtual Color Color { get; set; }

		public Car(XElement element)
		{
			Brand = element.Elements().Where(e => e.Name == "brand").Select(e => e.Value).SingleOrDefault();
			ProductionDate = element.Elements().Where(e => e.Name == "productionDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
			ExactProductionDate = element.Elements().Where(e => e.Name == "exactProductionDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
			Manufacturer = element.Elements().Where(e => e.Name == "manufacturer").Select(e => new ManufacturerName(e)).SingleOrDefault() ?? new NullManufacturerName();
			ModelVersion = element.Elements().Where(e => e.Name == "modelVersion").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			Color = element.Elements().Where(e => e.Name == "color").Select(e => new Color(e)).SingleOrDefault() ?? new NullColor();
		}

		public Car()
		{ }

		public static bool operator ==(Car left, Car right)
		{
			return Utils.ValidatedEquals<NullCar>(left, right);
		}

		public static bool operator !=(Car left, Car right)
		{
			return !(left == right);
		}
	}

	internal class NullCar : Car
	{
		public override string Brand { get { throw this.NullAccess("Brand"); } }
		public override DateTime? ProductionDate { get { throw this.NullAccess("ProductionDate"); } }
		public override DateTime? ExactProductionDate { get { throw this.NullAccess("ExactProductionDate"); } }
		public override ManufacturerName Manufacturer { get { throw this.NullAccess("Manufacturer"); } }
		public override decimal? ModelVersion { get { throw this.NullAccess("ModelVersion"); } }
		public override Color Color { get { throw this.NullAccess("Color"); } }
	}

	public partial class ColorDescription
	{
		public virtual string Text { get; set; }
		public virtual IList<string> SubDescriptions { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }
		public virtual string DescriptionType { get; set; }

		public ColorDescription(XElement element)
		{
			Text = element.Elements().Where(e => e.Name == "text").Select(e => e.Value).SingleOrDefault();
			SubDescriptions = element.Elements().Where(e => e.Name == "SubDescription").Select(e => e.Value).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
			DescriptionType = element.Attributes().Where(e => e.Name == "descriptionType").Select(e => e.Value).SingleOrDefault();
		}

		public ColorDescription()
		{ }

		public static bool operator ==(ColorDescription left, ColorDescription right)
		{
			return Utils.ValidatedEquals<NullColorDescription>(left, right);
		}

		public static bool operator !=(ColorDescription left, ColorDescription right)
		{
			return !(left == right);
		}
	}

	internal class NullColorDescription : ColorDescription
	{
		public override string Text { get { throw this.NullAccess("Text"); } }
		public override IList<string> SubDescriptions { get { throw this.NullAccess("SubDescriptions"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
		public override string DescriptionType { get { throw this.NullAccess("DescriptionType"); } }
	}

	public partial class ManufacturerName
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ManufacturerName obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }
		public virtual string NameType { get; set; }

		public ManufacturerName(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
			NameType = element.Attributes().Where(e => e.Name == "nameType").Select(e => e.Value).SingleOrDefault();
		}

		public ManufacturerName()
		{ }

		public static bool operator ==(ManufacturerName left, ManufacturerName right)
		{
			return Utils.ValidatedEquals<NullManufacturerName>(left, right);
		}

		public static bool operator !=(ManufacturerName left, ManufacturerName right)
		{
			return !(left == right);
		}
	}

	internal class NullManufacturerName : ManufacturerName
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
		public override string NameType { get { throw this.NullAccess("NameType"); } }
	}

	public partial class TypeWithElementAndAttribute
	{
		public virtual string PriceType { get; set; }
		public virtual string PriceTypeAttribute { get; set; }

		public TypeWithElementAndAttribute(XElement element)
		{
			PriceType = element.Elements().Where(e => e.Name == "PriceType").Select(e => e.Value).SingleOrDefault();
			PriceTypeAttribute = element.Attributes().Where(e => e.Name == "PriceTypeAttribute").Select(e => e.Value).SingleOrDefault();
		}

		public TypeWithElementAndAttribute()
		{ }

		public static bool operator ==(TypeWithElementAndAttribute left, TypeWithElementAndAttribute right)
		{
			return Utils.ValidatedEquals<NullTypeWithElementAndAttribute>(left, right);
		}

		public static bool operator !=(TypeWithElementAndAttribute left, TypeWithElementAndAttribute right)
		{
			return !(left == right);
		}
	}

	internal class NullTypeWithElementAndAttribute : TypeWithElementAndAttribute
	{
		public override string PriceType { get { throw this.NullAccess("PriceType"); } }
		public override string PriceTypeAttribute { get { throw this.NullAccess("PriceTypeAttribute"); } }
	}


	internal static class Utils
	{
		public static Exception NullAccess<T>(this T src, string name)
		{
			return new NullReferenceException("Property '" + name + "' was accessed from a null '" + 
				typeof(T).BaseType.Name + "' object");
		}

		public static bool ValidatedEquals<T>(object d1, object d2)
		{
			if (d1 is T || d2 is T) return (d1 == null || d2 == null);
			return ReferenceEquals(d1, d2);
		}
	}
}