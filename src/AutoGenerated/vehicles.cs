using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace AutoGenerated
{
	public class Vehicles
	{
		public IList<Car> Cars { get; set; }

		public Vehicles(XElement element)
		{
			Cars = element.Elements().Where(e => e.Name == "car").Select(e => new Car(e)).ToList();
		}

		public Vehicles()
		{ }
	}

	public class Color
	{
		public string Hue { get; set; }
		public string Rgb { get; set; }
		public ColorDescription Description { get; set; }

		public Color(XElement element)
		{
			Hue = element.Elements().Where(e => e.Name == "hue").Select(e => e.Value).SingleOrDefault();
			Rgb = element.Elements().Where(e => e.Name == "rgb").Select(e => e.Value).SingleOrDefault();
			Description = element.Elements().Where(e => e.Name == "description").Select(e => new ColorDescription(e)).SingleOrDefault();
		}

		public Color()
		{ }
	}

	public class Car
	{
		public string Brand { get; set; }
		public ManufacturerName Manufacturer { get; set; }
		public Color Color { get; set; }

		public Car(XElement element)
		{
			Brand = element.Elements().Where(e => e.Name == "brand").Select(e => e.Value).SingleOrDefault();
			Manufacturer = element.Elements().Where(e => e.Name == "manufacturer").Select(e => new ManufacturerName(e)).SingleOrDefault();
			Color = element.Elements().Where(e => e.Name == "color").Select(e => new Color(e)).SingleOrDefault();
		}

		public Car()
		{ }
	}

	public class ColorDescription
	{
		public string Text { get; set; }
		public IList<string> SubDescriptions { get; set; }
		public string LanguageAndScriptCode { get; set; }
		public string DescriptionType { get; set; }

		public ColorDescription(XElement element)
		{
			Text = element.Elements().Where(e => e.Name == "text").Select(e => e.Value).SingleOrDefault();
			SubDescriptions = element.Elements().Where(e => e.Name == "SubDescription").Select(e => e.Value).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
			DescriptionType = element.Attributes().Where(a=>a.Name=="descriptionType").Select(a=>a.Value).FirstOrDefault();
		}

		public ColorDescription()
		{ }
	}

	public class ManufacturerName
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ManufacturerName obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }
		public string NameType { get; set; }

		public ManufacturerName(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
			NameType = element.Attributes().Where(a=>a.Name=="nameType").Select(a=>a.Value).FirstOrDefault();
		}

		public ManufacturerName()
		{ }
	}

}