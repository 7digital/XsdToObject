using System;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using AutoGenerated;
using NUnit.Framework;

namespace SevenDigital.Parsing.XsdToObject.Tests
{

	[TestFixture]
	public class AutoGeneratedClassesTest
	{
		private Vehicles _vehicles;

		[SetUp]
		public void SetUp()
		{
			XDocument doc = XDocument.Load(Path.Combine("res", "xml.xml"));
			_vehicles = new Vehicles(doc.Elements().Single(e => e.Name == "vehicles"));
		}

		[Test]
		public void ShouldBeNotNull()
		{
			Assert.That(_vehicles, Is.Not.Null);
		}

		[Test]
		public void ShouldHaveBMW()
		{
			Car car = _vehicles.Cars.Single(c => c.Brand == "BMW");
			Assert.That(car.Color.Hue, Is.EqualTo("black"));
			Assert.That(car.Color.Rgb, Is.Null);
			Assert.That(car.ProductionDate, Is.EqualTo(new DateTime(2008, 10, 25)));

			Assert.That(car.Color.Description.Text, Is.EqualTo("This is the text"));

			Assert.That(car.Manufacturer.NameType, Is.EqualTo("MajorType"));

			Assert.That((string)car.Manufacturer, Is.EqualTo("BMW UK"));
		}

		[Test]
		public void The_bmw_should_have_the_expected_description_Type()
		{
			Car car = _vehicles.Cars.Single(c => c.Brand == "BMW");
			Assert.That(car.Color.Description.DescriptionType, Is.EqualTo("thisIsTheType"));
		}

		[Test]
		public void ShouldHaveHonda()
		{
			Car car = _vehicles.Cars.Single(c => c.Brand == "Honda");
			Assert.That(car.Color.Hue, Is.EqualTo("red"));
			Assert.That(car.Color.Rgb, Is.EqualTo("0xff0000"));
			Assert.That(car.Manufacturer.NameType, Is.Null);
			Assert.That((string)car.Manufacturer, Is.EqualTo("UK Manufacturing Ltd"));
		}

		[Test]
		public void ShouldThrowMeaningfulExceptionWhenPropertyAccessedOnNullObject()
		{
			Car car = _vehicles.Cars.Single(c => c.Brand == "Honda");
			var exception = Assert.Throws<NullReferenceException>(
				() =>
				{
					var title = car.Color.Description.Text;
				});

			Assert.That(exception.Message, Is.EqualTo("Property 'Text' was accessed from a null 'ColorDescription' object"));
		}

		[Test]
		public void ShouldTreatInvalidColorAsNull()
		{
			var invalid_description = _vehicles.Cars.Single(c => c.Brand == "Honda").Color.Description;

			Assert.That(invalid_description == null);
			Assert.That(null == invalid_description);
		}

		[Test]
		public void ShouldNotTreatValidColorAsNull()
		{
			var description = _vehicles.Cars.Single(c => c.Brand == "BMW").Color.Description;

			Assert.That(description != null);
			Assert.That(null != description);
		}
	}
}
